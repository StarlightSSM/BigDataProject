# -*- coding: utf-8 -*-
"""bigData_project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1u1mmvZeWG8l0OhpE6tQJpBbPuo_tjHRV

seaborn 한글 폰트 for colab
"""

# 단계 1: 폰트 설치
import matplotlib.font_manager as fm
import matplotlib.pyplot as plt
!apt-get -qq -y install fonts-nanum > /dev/null
fe = fm.FontEntry(
    fname=r'/usr/share/fonts/truetype/nanum/NanumBarunGothic.ttf', # ttf 파일이 저장되어 있는 경로
    name='NanumBarunGothic') # 이 폰트의 원하는 이름 설정
fm.fontManager.ttflist.insert(0, fe) # Matplotlib에 폰트 추가
plt.rcParams.update({'font.size': 18, 'font.family': 'NanumBarunGothic'}) # 폰트 설치

# 단계 2: 런타임 재시작
import os
os.kill(os.getpid(), 9)

# 단계 3: 한글 폰트 설정
import matplotlib.pyplot as plt
import matplotlib as mpl
import matplotlib.font_manager as fm
# 마이너스 표시 문제
mpl.rcParams['axes.unicode_minus'] = False
# 한글 폰트 설정
fe = fm.FontEntry(
    fname=r'/usr/share/fonts/truetype/nanum/NanumBarunGothic.ttf', # ttf 파일이 저장되어 있는 경로
    name='NanumBarunGothic') # 이 폰트의 원하는 이름 설정
fm.fontManager.ttflist.insert(0, fe) # Matplotlib에 폰트 추가
plt.rcParams.update({'font.size': 18, 'font.family': 'NanumBarunGothic'}) # 폰트

!sudo apt-get install -y fonts-nanum
!sudo fc-cache -fv
!rm ~/.cache/matplotlib -rf

import matplotlib.pyplot as plt

plt.rc('font', family='NanumBarunGothic')

"""CSV 파일 불러오기 및 열이름 설정

"""

import pandas as pd

df1 = pd.read_csv("/content/cars_recall1.csv", encoding="euc-kr")
df2 = pd.read_csv("/content/cars_recall2.csv", encoding="euc-kr")

#  데이터프레임의 정보 출력
print(df1.info())
print("\n")
print(df2.info())

# 각 데이터프레임의 열 명 지정
column_names = ["제작사", "차명", "생산기간(부터)", "생산기간(까지)", "리콜개시일", "리콜사유"]
column_names2 = ["접수일자", "제작사", "차명", "모델년도"]
df1.columns = column_names
df2.columns = column_names2

# 변경 결과 출력
print(df1)
print("\n")
print(df2)

"""데이터 가공 - 필요한 데이터만 추출하기"""

# 생산기간은 년도 부분만 추출
# 생산기간과 모델년도를 동일하게 간주함
# 생산기간(까지)를 모델년도로 간주함
df1.drop(['리콜사유', '생산기간(부터)'], axis=1, inplace=True)
print(df1)

print(df2)

#df1에서 생산기간(까지)를 모델년도로 설정하고, 년도만 추출하여 변경사항 적용
df1.rename(columns={'생산기간(까지)':'모델년도'}, inplace=True)
df1['모델년도'] = df1['모델년도'].str.extract(r'(\d{4})')
print(df1)

print(df1)
print(df2)
print('\n')

df2.rename(columns={'접수일자':'리콜개시일'}, inplace=True)
print(df1)
print(df2)

"""특정 열의 위치 바꾸기"""

column_to_move = '리콜개시일'

# 특정 열을 제외한 나머지 열들을 리스트에 추가, 새로운 순서를 만들기 위함
new_column_order = [col for col in df2.columns if col != column_to_move]
new_column_order.append(column_to_move) # 위치를 바꾸고 싶은 열을 맨 끝에다 추가

# 열을 다시 재정렬
df2 = df2[new_column_order]
print(df2)

df1.info()
print('\n')
df2.info()

"""두 데이터프레임 연결하기"""

df3 = pd.concat([df1, df2], join='outer')
print(df3)

# Sort the DataFrame based on the '리콜개시일' column in ascending order (oldest to newest dates)
df3 = df3.sort_values(by='리콜개시일')

# Reset the index after sorting (optional)
df3 = df3.reset_index(drop=True)
print(df3)

"""계절별로 구분하기"""

# 계절별: 봄(3~5), 여름(6~8), 가을(9~11), 겨울(12~2)
# 계절별로 구분했을 때 구분결과를 보여주는 열 추가하기
# 봄은 Spring, 여름은 Summer, 가을은 Autumn, 겨울은 Winter

# Convert '리콜개시일' column to datetime
df3['리콜개시일'] = pd.to_datetime(df3['리콜개시일'])

# Define a function to map months to seasons
def get_season(month):
    if 3 <= month <= 5:
        return 'Spring'
    elif 6 <= month <= 8:
        return 'Summer'
    elif 9 <= month <= 11:
        return 'Autumn'
    else:
        return 'Winter'

# Create a new column 'Season' based on the '리콜개시일' column
df3['계절'] = df3['리콜개시일'].dt.month.apply(get_season)

# Now, df1 will have a 'Season' column with the corresponding seasons
print(df3)

"""월별로 구분하기"""

# Convert '리콜개시일' column to datetime
df3['리콜개시일'] = pd.to_datetime(df3['리콜개시일'])

# Define a function to map months to names
def get_month_name(month):
    month_names = [
        'Jan', 'Feb', 'Mar', 'April', 'May', 'June',
        'July', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'
    ]
    return month_names[month - 1]

# Create a new column 'Month' based on the '리콜개시일' column
df3['월별'] = df3['리콜개시일'].dt.month.apply(get_month_name)

# Now, df1 will have a 'Month' column with the corresponding month names
print(df3)

"""결측치, NaN 값 확인 및 제거하기"""

df3.isna().sum(axis=0)

df3 = df3.dropna()
print(df3)

# 결과를 csv로 저장
df3.to_csv("/content/result.csv", encoding="euc-kr")
df3.isna().sum(axis=0)

"""시각화하기

그룹화하기 및 리콜 횟수가 많은 순서대로 정렬하기
"""

# 계절별로 구분하기
import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd

# csv 불러오기
df3 = pd.read_csv("/content/result.csv", encoding="euc-kr")

grouped_Season = df3.groupby(['계절'])
grouped_Season.count().sort_values(by='리콜개시일', ascending=False)

# Reset the index to make '계절' a regular column, not the index
grouped_Season = grouped_Season.count().reset_index()
grouped_Season.rename(columns={"계절": 'Seasons', "리콜개시일": 'recall_count'}, inplace=True)

# Define the order in which you want the seasons to appear
season_order = ['Spring', 'Summer', 'Autumn', 'Winter']

# Create a bar chart with the specified season order
plt.figure(figsize=(8, 5))
sns.set(style="darkgrid")

ax = sns.barplot(x="Seasons", y="recall_count", data=grouped_Season, order=season_order, palette="Set2")
plt.show()

# 제작사별로 구분하기
import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd

# 그래프 그리기
df3 = pd.read_csv("/content/result.csv", encoding="euc-kr")

grouped_manufacturer = df3.groupby(['제작사'])
grouped_manufacturer.count()["차명"].sort_values(ascending=False)
pd.DataFrame(grouped_manufacturer.count()["차명"].sort_values(ascending=False)).rename(columns={"차명":"리콜횟수"})

grouped_manufacturer = grouped_manufacturer.count().reset_index()
grouped_manufacturer.rename(columns={"제작사": 'manufacturer', "리콜개시일": 'recall_count'}, inplace=True)

top_manufacturers = grouped_manufacturer.sort_values(by='recall_count', ascending=False).head(20)

# 시각화
plt.figure(figsize=(25, 15))
sns.set(style="darkgrid")
sns.set_palette("Set2")

ax = sns.barplot(x="manufacturer", y="recall_count", data=top_manufacturers)

# Matplotlib 함수로 한글 폰트 설정 및 xticks 조정
plt.xticks(rotation=45, fontname='NanumBarunGothic')
plt.xlabel('제작사', fontname='NanumBarunGothic')
plt.ylabel('리콜횟수', fontname='NanumBarunGothic')
plt.title('상위 20 제작사별 리콜횟수', fontname='NanumBarunGothic')

plt.show()

# 모델별로 구분하기

import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd

# 그래프 그리기
df3 = pd.read_csv("/content/result.csv", encoding="euc-kr")

grouped_models = df3.groupby(['차명'])
grouped_models.count()["리콜개시일"].sort_values(ascending=False)

grouped_models = grouped_models.count().reset_index()
grouped_models.rename(columns={"차명": 'models', "리콜개시일": 'recall_count'}, inplace=True)

top_models = grouped_models.sort_values(by='recall_count', ascending=False).head(20)

# 시각화
plt.figure(figsize=(25, 15))
sns.set(style="darkgrid")
sns.set_palette("Paired")

ax = sns.barplot(x="models", y="recall_count", data=top_models)

# Matplotlib 함수로 한글 폰트 설정 및 xticks 조정
plt.xticks(rotation=45, fontname='NanumBarunGothic')
plt.xlabel('모델명', fontname='NanumBarunGothic')
plt.ylabel('리콜횟수', fontname='NanumBarunGothic')
plt.title('상위 20 모델별 리콜횟수', fontname='NanumBarunGothic')

plt.show()

# 월별로 구분하기
import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd

# csv 불러오기
df3 = pd.read_csv("/content/result.csv", encoding="euc-kr")

grouped_monthly = df3.groupby(['월별'])
grouped_monthly.count()["리콜개시일"].sort_values(ascending=False)

# Reset the index to make '계절' a regular column, not the index
grouped_monthly = grouped_monthly.count().reset_index()
grouped_monthly.rename(columns={"월별": 'months', "리콜개시일": 'recall_count'}, inplace=True)

# Define the order in which you want the seasons to appear
month_order = ['Jan', 'Feb', 'Mar', 'April', 'May', 'June', 'July', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']

# Create a bar chart with the specified season order
plt.figure(figsize=(10, 5))
sns.set(style="darkgrid")
sns.barplot(x="months", y="recall_count", data=grouped_monthly, order=month_order, palette="Set2")
plt.show()